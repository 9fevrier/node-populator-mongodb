{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as _ from 'lodash';\nimport * as bunyan from 'bunyan';\nimport * as mongodb_ from 'mongodb';\nimport * as path from 'path';\n\n// import * as promisifyAll from 'es6-promisify-all';\nconst promisifyAll = require('es6-promisify-all');\n// import * as PromisesControlFlow from 'pigalle-promises-control-flow';\nconst PromisesControlFlow = require('pigalle-promises-control-flow');\nconst mongodb = promisifyAll(mongodb_);\nconst MongoClient = mongodb.MongoClient;\n\n// The logger.\nconst LOG = bunyan.createLogger({name: __filename});\n\n/**\n * # Helper for MongoDB populating\n *\n */\nclass PopulatorMongo extends PromisesControlFlow {\n\n  /**\n   * ### constructor(uri, collections)\n   *\n   * Constructor.\n   *\n   */\n  constructor(uri, resourcesPath, collections) {\n    LOG.info('create a new instance of MongoPopulator');\n    super();\n    this.uri = uri;\n    this.collections = collections;\n    this.path = resourcesPath;\n    this._connection = null;\n    return this;\n  }\n\n  /**\n   * ### connect()\n   *\n   */\n  connect() {\n    LOG.info('connect to the database');\n    return this.next(() => {\n      return new Promise((resolve, reject) => { // eslint-disable-line no-unused-vars\n        MongoClient.connect(this.uri)\n          .then((connection) => {\n            this._connection = connection;\n            resolve(this);\n          });\n      });\n    });\n  }\n\n  /**\n   * ### dropCollections()\n   *\n   * Drop all collections.\n   *\n   */\n  drop() {\n    return this.next(() => {\n      LOG.info('drop old collections');\n      const stack = [];\n      this.collections.map((name) => {\n        LOG.info('try to drop collection: ' + name);\n        stack.push(this._connection.collection(name).deleteMany({}));\n        stack.push(this._connection.collection(name).deleteMany({}));\n      })\n      ;\n      return Promise.all(stack);\n    })\n      ;\n  }\n\n  /**\n   * ### insertDocumentsInCollections\n   *\n   * Insert documents.\n   *\n   */\n  insert() {\n    return this.next(() => {\n      LOG.info('insert the provided data');\n      const stack = [];\n      this.collections.map((name) => {\n        const data = require(path.join(this.path, name));\n        if ((data) && (_.isArray(data)) && (data.length > 0)) {\n          stack.push(this._connection.collection(name).insertMany(data));\n        }\n      });\n      return Promise.all(stack);\n    });\n  }\n\n  /**\n   * ## close()\n   *\n   * Close the current MongoDB connection.\n   *\n   */\n  close() {\n    return this.next(() => {\n      LOG.info('close');\n      return new Promise((resolve, reject) => { // eslint-disable-line no-unused-vars\n        this._connection.close();\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * ## populate()\n   *\n   * Populate the database with testing data.\n   *\n   */\n  populate(fn) {\n    return this.connect().drop().insert().done(fn);\n  }\n}\n\nexport default PopulatorMongo;"],"sourceRoot":"/source/"}