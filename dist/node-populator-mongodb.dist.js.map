{"version":3,"sources":["index.js"],"names":["bunyan","path","LOG","name","__filename","dbQueryCounter","maxDbIdleTime","closeIdleDb","connection","previousCounter","checker","setInterval","close","clearInterval","PopulatorMongo","host","port","dbname","resourcesPath","collections","coll","db","Db","Server","p1","open","then","collection","stack","map","p","dropIndexes","catch","push","Promise","all","drop","resolve","setTimeout","insertMany","require","console","log"],"mappings":"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","file":"node-populator-mongodb.dist.js","sourcesContent":["import util from 'util';\nimport { createLogger } from 'bunyan';\nimport * as bunyan from 'bunyan';\nimport mongodb from 'mongodb';\nimport { join } from 'path';\nimport * as path from 'path';\n\n/**\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 9 Février\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\n/**\n * # Node Populator for MongoDB: entry point.\n *\n * (c) 2016, 9 Février <contact@9fevrier.com>\n *\n * This file is a part of Node Populator for MongoDB.\n */\n\n// import * as promisifyAll from 'es6-promisify-all';\n// The logger.\nconst LOG = createLogger({name: __filename});\n\nvar dbQueryCounter = 0;\nvar maxDbIdleTime = 5000; //maximum db idle time\n\nvar closeIdleDb = function(connection){\n  var previousCounter = 0;\n  var checker = setInterval(function(){\n    if (previousCounter == dbQueryCounter && dbQueryCounter != 0) {\n        connection.close();\n        clearInterval(closeIdleDb);\n    } else {\n        previousCounter = dbQueryCounter;\n    }\n  }, maxDbIdleTime);\n};\n\n/**\n * # Helper for MongoDB populating\n *\n */\nfunction PopulatorMongo(host, port, dbname, resourcesPath, collections) {\n  let coll = null;\n  let db = new mongodb.Db(dbname, new mongodb.Server(host, port));\n  let p1 = db.open();\n  p1 = p1.then((db) => {\n    db = db;\n  });\n  p1 = p1.then(() => {\n    coll = db.collection('test');\n  });\n  p1 = p1.then(() => {\n    const stack = [];\n    collections.map((name) => {\n      let p = db.collection(name).dropIndexes();\n      p = p.catch(err => { });\n      stack.push(p);\n    });\n    return Promise.all(stack);\n  });\n  p1 = p1.then(() => {\n    const stack = [];\n    collections.map((name) => {\n      let p = db.collection(name).drop();\n      p = p.catch(err => { });\n      stack.push(p);\n    });\n    return Promise.all(stack);\n  });\n  p1 = p1.then(() => {\n    return new Promise((resolve) => {\n      setTimeout(resolve, 2000);\n    });\n  });\n  p1 = p1.then(() => {\n    const stack = [];\n    collections.map((name) => {\n      const p = db.collection(name).insertMany(require(join(resourcesPath, name)));\n      stack.push(p);\n    });\n    return Promise.all(stack);\n  });\n  p1 = p1.then(() => {\n    console.log('close');\n    closeIdleDb(db);\n    return db.close();\n  });\n\n\n  p1.catch(err => console.log);\n  return p1;\n}\n\nexport default PopulatorMongo;\n"],"sourceRoot":"/home/fmichaud/.node_modules/node-populator-mongodb/.gulp/tasks/src"}